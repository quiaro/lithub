import { getAuthToken } from '../common/auth';

/**
 * Fetch an article
 * @param {articleId} articleId - ID of the article to fetch
 */
export const fetchArticle = (articleId) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();

    xhr.open('get', `/api/articles/${articleId}`);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
      }
    });
    xhr.send();
  });
}

/**
 * Fetch articles read by other users
 * @param {number} start - Page item index start
 * @param {number} limit - Number of items per page (Default: 20, max number is 50)
 */
export const fetchReadByOthers = (start, limit) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();
    const pageLimit = limit ? `limit=${limit}` : '';
    const pageStart = start ? `start=${start}` : '';
    const url = (limit || start) ? `/api/articles?${pageLimit}${pageStart}` : `/api/articles`;

    xhr.open('get', url);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
      }
    });
    xhr.send();
  });
}

/**
 * Fetch latest articles read by users
 */
export const fetchLatest = () => {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();

    xhr.open('get', '/api/articles/latest');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        if (typeof xhr.response === 'string') {
          // A "handled" error response generated by the server should
          // come in the form of a JSON object. If not, attach a generic
          // message.
          reject({
            code: xhr.status,
            message: 'Unable to fulfill request at this time. Please try again later.'
          })
        } else {
          reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
        }
      }
    });
    xhr.send();
  });
}
