import { getAuthToken } from '../common/auth';

/**
 * Fetch latest books read by users
 */
export const fetchLatest = () => {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();

    xhr.open('get', '/api/books/latest');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        if (typeof xhr.response === 'string') {
          // A "handled" error response generated by the server should
          // come in the form of a JSON object. If not, attach a generic
          // message.
          reject({
            code: xhr.status,
            message: 'Unable to fulfill request at this time. Please try again later.'
          })
        } else {
          reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
        }
      }
    });
    xhr.send();
  });
}

/**
 * Fetch a book
 * @param {bookId} bookId - ID of the book to fetch
 */
export const fetchBook = (bookId) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();

    xhr.open('get', `/api/books/${bookId}`);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
      }
    });
    xhr.send();
  });
}

/**
 * Fetch books read by other users
 * @param {number} start - Page item index start
 * @param {number} limit - Number of items per page (Default: 20, max number is 50)
 */
export const fetchReadByOthers = (start, limit) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();
    const pageLimit = limit ? `limit=${limit}` : '';
    const pageStart = start ? `start=${start}` : '';
    const url = (limit || start) ? `/api/books?${pageLimit}${pageStart}` : `/api/books`;

    xhr.open('get', url);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
      }
    });
    xhr.send();
  });
}

export const save = (bookReview) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();

    xhr.open('post', '/api/my/books');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 201) {
        resolve(xhr.response)
      } else {
        reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
      }
    });
    xhr.send(JSON.stringify(bookReview));
  });
}

export const fetchHistory = () => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();

    xhr.open('get', '/api/my/books');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
      }
    });
    xhr.send();
  });
}

export const addBookToHistory = (review) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();

    xhr.open('post', '/api/my/books');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 201) {
        resolve(JSON.parse(xhr.response))
      } else {
        if (typeof xhr.response === 'string') {
          // A "handled" error response generated by the server should
          // come in the form of a JSON object. If not, attach a generic
          // message.
          reject({
            code: xhr.status,
            message: 'Unable to fulfill request at this time. Please try again later.'
          })
        } else {
          reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
        }
      }
    });
    xhr.send(JSON.stringify(review));
  });
}

export const editBookInHistory = (review) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();

    xhr.open('put', '/api/my/books');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.response))
      } else {
        if (typeof xhr.response === 'string') {
          // A "handled" error response generated by the server should
          // come in the form of a JSON object. If not, attach a generic
          // message.
          reject({
            code: xhr.status,
            message: 'Unable to fulfill request at this time. Please try again later.'
          })
        } else {
          reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
        }
      }
    });
    xhr.send(JSON.stringify(review));
  });
}

export const deleteBookFromHistory = (review) => {
  return new Promise((resolve, reject) => {
    const token = getAuthToken();
    const xhr = new XMLHttpRequest();

    xhr.open('delete', '/api/my/books');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    xhr.addEventListener('load', () => {
      if (xhr.status === 204) {
        resolve()
      } else {
        if (typeof xhr.response === 'string') {
          // A "handled" error response generated by the server should
          // come in the form of a JSON object. If not, attach a generic
          // message.
          reject({
            code: xhr.status,
            message: 'Unable to fulfill request at this time. Please try again later.'
          })
        } else {
          reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
        }
      }
    });
    xhr.send(JSON.stringify(review));
  });
}
