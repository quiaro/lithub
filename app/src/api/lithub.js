import { getAuthToken } from '../common/auth';

export const URLprefix = '';

/**
 * Make a request to the LitHub API
 * @param {string} method - HTTP verb
 * @param {string} endpoint - URL endpoint to access
 * @param {object} payload - Request payload
 * @param {boolean} isProtected - Are the resources in the URL protected
 *                  (i.e. is an auth token required to access the resources)
 */
export const lithubRequest = (method, endpoint, payload = null, isProtected = true) => {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    const url = URLprefix + endpoint;
    payload = payload ? JSON.stringify(payload) : undefined;

    xhr.open(method, url);

    if (isProtected) {
      const token = getAuthToken();
      xhr.setRequestHeader('Authorization', `Bearer: ${token}`);
    }
    xhr.setRequestHeader('Content-Type', 'application/json');

    xhr.addEventListener('load', () => {
      if ((method === 'get' && xhr.status === 200) ||
          (method === 'put' && xhr.status === 200) ||
          (method === 'post' && xhr.status === 201)) {
        resolve(JSON.parse(xhr.response))

      } else if (method === 'delete' && xhr.status === 204) {
        resolve();

      } else {
        if (typeof xhr.response === 'string') {
          // A "handled" error response generated by the server should
          // come in the form of a JSON object. If not, attach a generic
          // message.
          reject({
            code: xhr.status,
            message: 'Unable to fulfill request at this time. Please try again later.'
          })
        } else {
          reject({ code: xhr.status, message: JSON.parse(xhr.response).message})
        }
      }
    });
    xhr.send(payload);
  });
}
