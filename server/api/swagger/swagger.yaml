swagger: "2.0"
info:
  version: "0.1.0"
  title: Lit Hub API
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /api
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

securityDefinitions:
  Bearer:
    description: "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header. A valid JWT token is generated by the API and returned as answer of a call to the route /api/auth/login giving a valid user & password. The following syntax must be used in the 'Authorization' header: Bearer: xxxxxx.yyyyyyy.zzzzzz"
    type: apiKey
    name: Authorization
    in: 'header'

paths:
  /auth/login:
    x-swagger-router-controller: Login
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Returns a valid web token to use with subsequent requests
      parameters:
      - name: email
        in: 'formData'
        description: User email
        required: true
        type: string
      - name: password
        in: 'formData'
        description: Password
        required: true
        type: string
        format: password
      responses:
        "200":
          description: Authentication Token
          schema:
            $ref: "#/definitions/Token"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /auth/signup:
    x-swagger-router-controller: SignUp
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Registers a user in the system
      parameters:
      - name: username
        in: 'formData'
        description: Username in the system
        required: true
        type: string
      - name: name
        in: 'formData'
        description: User's real name
        type: string
      - name: email
        in: 'formData'
        description: User email
        required: true
        type: string
      - name: password
        in: 'formData'
        description: Password
        required: true
        type: string
        format: password
      responses:
        "201":
          description: Newly created user
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /auth/from_google_token:
    x-swagger-router-controller: GoogleOAuth
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Exchanges a Google ID Token for an authentication token to use for API requests
      operationId: 'fromGoogleToken'
      parameters:
      - name: id_token
        in: 'formData'
        description: Google ID Token
        required: true
        type: string
      responses:
        "200":
          description: Authentication Token
          schema:
            $ref: "#/definitions/Token"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /auth/from_facebook_token:
    x-swagger-router-controller: FacebookOAuth
    post:
      description: Exchanges a Facebook Access Token for an authentication token to use for API requests
      operationId: 'fromFacebookToken'
      parameters:
      - name: user
        in: body
        description: "User profile information to store in an authentication token"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: Authentication Token
          schema:
            $ref: "#/definitions/Token"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /me:
    x-swagger-router-controller: Profile
    get:
      security:
      - Bearer: []
      description: Get the user's profile information
      responses:
        '200':
          description: "User's profile information"
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
            
  /my/books:
    x-swagger-router-controller: MyBooks
    get:
      security:
      - Bearer: []
      description: Get the list of books read by the token owner and his reviews
      responses:
        '200':
          description: "List of books with reviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
      - Bearer: []
      description: Create a new book entry if there isn't one and save the user's review
      parameters:
      - name: review
        in: body
        description: "Book review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '201':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
      - Bearer: []
      description: Update a book entry and the user's corresponding review. If the book information is updated and the book has already received reviews from other users, then a new book entry is created.
      parameters:
      - name: review
        in: body
        description: "Book review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '200':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"            
    

  /resources:
    x-swagger-router-controller: Resource
    get:
      security:
      - Bearer: []
      description: Returns a paginated list of books, articles and/or quotes that users have read sorted by their modification date by default (unless a tag filter is specified)
      # used as the method name of the controller
      operationId: 'getAll'
      parameters:
        - name: filter
          in: query
          description: Tag filter for the books, articles and/or quotes
          required: false
          type: string
      responses:
        "200":
          description: Array of literary works
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

    post:
      description: "Add a new resource"
      operationId: "create"
      parameters:
        - name: resource
          in: body
          description: "The resource object to be added"
          required: true
          schema:
            $ref: "#/definitions/Resource"
      responses:
        '201':
          description: "Resource successfully added"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /resources/{id}:
    x-swagger-router-controller: Resource
    get:
      description: Get a single resource item by its ID
      operationId: "findById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the resource to get"
        required: true
        type: string
      responses:
        '200':
          description: Literary resource
          schema:
            $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

    put:
      description: "Update a resource item"
      operationId: "updateById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the resource to update"
        required: true
        type: string
      - name: "updated_resource"
        in: "body"
        description: "Updated resource"
        required: true
        schema:
            $ref: "#/definitions/Resource"
      responses:
        "201":
          description: "Literary resource updated"
          schema:
            $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

    delete:
      description: "Delete a resource item"
      operationId: "deleteById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the resource to delete"
        required: true
        type: string
      responses:
        "204":
          description: "Literary resource successfully deleted"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"


  /resources/latest:
    x-swagger-router-controller: ResourceList
    get:
      description: "Returns the 10 latest books, articles and/or quotes that users have read sorted by their modification date by default (unless a tag filter is specified)"
      # used as the method name of the controller
      operationId: "getLatest"
      parameters:
        - name: filter
          in: query
          description: "Tag filter for the books, articles and/or quotes"
          required: false
          type: string
      responses:
        "200":
          description: "Array of literary works"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /swagger:
    x-swagger-pipe: swagger_raw

# complex objects have schema definitions
definitions:

  Error:
    type: object
    required:
    - message
    properties:
      message:
        type: string
      errors:
        type: object

  Resource:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "ID of the literary work"
      type:
        type: "string"
        description: "Type of literary resource: book, article or quote"
      title:
        type: "string"
        description: "Title of a book or article or the text for a quote"
      authors:
        type: "array"
        items: {
          type: "string"
        }
        description: "List of authors of the literary work"
      readBy:
        type: "array"
        items: {
          type: "string"
        }
        description: "List of IDs of all the users that have read this literary work"
        
  User:
    type: "object"
    properties:
      email:
        type: "string"
        description: "User email"
      name:
        type: "string"
        description: "User full name"
      username:
        type: "string"
        description: "Username or user first name"
      picture:
        type: "string"
        description: "URL of the user's profile picture"
      token:
        type: "string"
        description: "User token from a 3rd-party OAuth system to be verified by the app server"
        
  Review:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "Resource ID"
      title:
        type: "string"
        description: "Title of the resource"
      author:
        type: "string"
        description: "Author of the resource"
      rating:
        type: "number"
        description: "User rating for the resource"
      comments:
        type: "string"
        description: "User's thoughts or comments on the resource"
      created:
        type: "string"
        format: "date-time"
        description: "Date when user submitted the review"
      last_modified:
        type: "string"
        format: "date-time"
        description: "Date when the user last modified the review"

  Token:
    type: object
    properties:
     token:
      type: string
