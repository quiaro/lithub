swagger: "2.0"
info:
  version: "0.1.0"
  title: Lit Hub API
# during dev, should point to your local machine
host: 0.0.0.0:10010
# basePath prefixes all resource paths
basePath: /api
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

securityDefinitions:
  Bearer:
    description: "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header. A valid JWT token is generated by the API and returned as answer of a call to the route /api/auth/login giving a valid user & password. The following syntax must be used in the 'Authorization' header: Bearer: xxxxxx.yyyyyyy.zzzzzz"
    type: apiKey
    name: Authorization
    in: 'header'

paths:
  /auth/login:
    x-swagger-router-controller: Login
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Returns a valid web token to use with subsequent requests
      parameters:
      - name: email
        in: 'formData'
        description: User email
        required: true
        type: string
      - name: password
        in: 'formData'
        description: Password
        required: true
        type: string
        format: password
      responses:
        "200":
          description: Authentication Token
          schema:
            $ref: "#/definitions/Token"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /auth/signup:
    x-swagger-router-controller: SignUp
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Registers a user in the system
      parameters:
      - name: username
        in: 'formData'
        description: Username in the system
        required: true
        type: string
      - name: name
        in: 'formData'
        description: User's real name
        type: string
      - name: email
        in: 'formData'
        description: User email
        required: true
        type: string
      - name: password
        in: 'formData'
        description: Password
        required: true
        type: string
        format: password
      responses:
        "201":
          description: Newly created user
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /auth/from_google_token:
    x-swagger-router-controller: GoogleOAuth
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Exchanges a Google ID Token for an authentication token to use for API requests
      operationId: 'fromGoogleToken'
      parameters:
      - name: id_token
        in: 'formData'
        description: Google ID Token
        required: true
        type: string
      responses:
        "200":
          description: Authentication Token
          schema:
            $ref: "#/definitions/Token"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /auth/from_facebook_token:
    x-swagger-router-controller: FacebookOAuth
    post:
      description: Exchanges a Facebook Access Token for an authentication token to use for API requests
      operationId: 'fromFacebookToken'
      parameters:
      - name: user
        in: body
        description: "User profile information to store in an authentication token"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: Authentication Token
          schema:
            $ref: "#/definitions/Token"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /me:
    x-swagger-router-controller: Profile
    get:
      security:
      - Bearer: []
      description: Get the user's profile information
      responses:
        '200':
          description: "User's profile information"
          schema:
            $ref: "#/definitions/User"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /my/books:
    x-swagger-router-controller: BookHistory
    get:
      security:
      - Bearer: []
      description: Get the list of books read by the token owner and his reviews
      responses:
        '200':
          description: "List of books with reviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
      - Bearer: []
      description: Create a new book entry if there isn't one and save the user's review
      parameters:
      - name: review
        in: body
        description: "Book review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '201':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
      - Bearer: []
      description: Update a book entry and the user's corresponding review. If the book information is updated and the book has already received reviews from other users, then a new book entry is created.
      parameters:
      - name: review
        in: body
        description: "Book review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '200':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
      - Bearer: []
      description: Delete a user's review from a book entry. If the book entry only has that user review, then the book entry is deleted as well.
      parameters:
      - name: review
        in: body
        description: "Book review to delete"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '204':
          description: "Review deleted successfully"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /books:
    x-swagger-router-controller: Books
    get:
      security:
      - Bearer: []
      description: Returns a paginated list of books that other users have read sorted by their last modified date
      parameters:
        - name: limit
          in: query
          description: Number of books per page
          required: false
          type: string
        - name: start
          in: query
          description: Page index start
          required: false
          type: string
      responses:
        "200":
          description: Array of books
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Resource"
              meta:
                type: "object"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /books/{id}:
    x-swagger-router-controller: Book
    get:
      security:
      - Bearer: []
      description: Returns a book
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          type: string
      responses:
        "200":
          description: Book
          schema:
            $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /books/latest:
    x-swagger-router-controller: Overview
    get:
      description: "Returns the 10 latest books that users have read sorted by their last modified date"
      # controller method name
      operationId: "getBooks"
      responses:
        "200":
          description: "Array of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /my/articles:
    x-swagger-router-controller: ArticleHistory
    get:
      security:
      - Bearer: []
      description: Get the list of articles read by the token owner and his reviews
      responses:
        '200':
          description: "List of articles with reviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
      - Bearer: []
      description: Create a new article entry if there isn't one and save the user's review
      parameters:
      - name: review
        in: body
        description: "Article review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '201':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
      - Bearer: []
      description: Update an article entry and the user's corresponding review. If the article information is updated and the article has already received reviews from other users, then a new article entry is created.
      parameters:
      - name: review
        in: body
        description: "Article review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '200':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
      - Bearer: []
      description: Delete a user's review from a article entry. If the article entry only has that user review, then the article entry is deleted as well.
      parameters:
      - name: review
        in: body
        description: "Article review to delete"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '204':
          description: "Review deleted successfully"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /articles:
    x-swagger-router-controller: Articles
    get:
      security:
      - Bearer: []
      description: Returns a paginated list of articles that other users have read sorted by their last modified date
      parameters:
        - name: limit
          in: query
          description: Number of articles per page
          required: false
          type: string
        - name: start
          in: query
          description: Page index start
          required: false
          type: string
      responses:
        "200":
          description: Array of articles
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Resource"
              meta:
                type: "object"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /articles/{id}:
    x-swagger-router-controller: Article
    get:
      security:
      - Bearer: []
      description: Returns an article
      parameters:
        - name: id
          in: path
          description: Article ID
          required: true
          type: string
      responses:
        "200":
          description: Article
          schema:
            $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /articles/latest:
    x-swagger-router-controller: Overview
    get:
      description: "Returns the 10 latest articles that users have read sorted by their last modified date"
      # controller method name
      operationId: "getArticles"
      responses:
        "200":
          description: "Array of articles"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /my/quotes:
    x-swagger-router-controller: QuoteHistory
    get:
      security:
      - Bearer: []
      description: Get the list of quotes read by the token owner and his reviews
      responses:
        '200':
          description: "List of quotes with reviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      security:
      - Bearer: []
      description: Create a new quote entry if there isn't one and save the user's review
      parameters:
      - name: review
        in: body
        description: "Quote review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '201':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      security:
      - Bearer: []
      description: Update a quote entry and the user's corresponding review. If the quote information is updated and the quote has already received reviews from other users, then a new quote entry is created.
      parameters:
      - name: review
        in: body
        description: "Quote review by a user"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '200':
          description: "Review saved successfully"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      security:
      - Bearer: []
      description: Delete a user's review from a quote entry. If the quote entry only has that user review, then the quote entry is deleted as well.
      parameters:
      - name: review
        in: body
        description: "Quote review to delete"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        '204':
          description: "Review deleted successfully"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /quotes:
    x-swagger-router-controller: Quotes
    get:
      security:
      - Bearer: []
      description: Returns a paginated list of quotes that other users have read sorted by their last modified date
      parameters:
        - name: limit
          in: query
          description: Number of quotes per page
          required: false
          type: string
        - name: start
          in: query
          description: Page index start
          required: false
          type: string
      responses:
        "200":
          description: Array of quotes
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Resource"
              meta:
                type: "object"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /quotes/{id}:
    x-swagger-router-controller: Quote
    get:
      security:
      - Bearer: []
      description: Returns a quote
      parameters:
        - name: id
          in: path
          description: Quote ID
          required: true
          type: string
      responses:
        "200":
          description: Quote
          schema:
            $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /quotes/latest:
    x-swagger-router-controller: Overview
    get:
      description: "Returns the 10 latest quotes that users have read sorted by their last modified date"
      # controller method name
      operationId: "getQuotes"
      responses:
        "200":
          description: "Array of quotes"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Resource"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

# complex objects have schema definitions
definitions:

  Error:
    type: object
    required:
    - message
    properties:
      message:
        type: string
      errors:
        type: object

  User:
    type: "object"
    properties:
      email:
        type: "string"
        description: "User email"
      name:
        type: "string"
        description: "User full name"
      username:
        type: "string"
        description: "Username or user first name"
      picture:
        type: "string"
        description: "URL of the user's profile picture"
      token:
        type: "string"
        description: "User token from a 3rd-party OAuth system to be verified by the app server"

  Review:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "Resource ID"
      title:
        type: "string"
        description: "Title of the resource"
      author:
        type: "string"
        description: "Author of the resource"
      link:
        type: "string"
        description: "Resource URL (if it applies)"
      rating:
        type: "number"
        description: "User rating for the resource"
      comments:
        type: "string"
        description: "User's thoughts or comments on the resource"
      created:
        type: "string"
        format: "date-time"
        description: "Date when user submitted the review"
      last_modified:
        type: "string"
        format: "date-time"
        description: "Date when the user last modified the review"

  Resource:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "Resource ID"
      title:
        type: "string"
        description: "Title of the resource"
      quote:
        type: "string"
        description: "Quote by a known or unknown author"
      author:
        type: "string"
        description: "Author of the resource"
      link:
        type: "string"
        description: "Resource URL (if it applies)"
      reviews:
        type: "array"
        items:
          $ref: "#/definitions/Review"
        description: "List of reviews by users for this resource"
      created:
        type: "string"
        format: "date-time"
        description: "Date when the resource was first submitted"
      last_modified:
        type: "string"
        format: "date-time"
        description: "Date when the resource was last modified"

  Token:
    type: object
    properties:
     token:
      type: string
